{% assign section_name = 'product-recommendations' %}
{% assign section_id = section_name | append: '--' | append: section.id %}

{% assign product_limit = section.settings.product_limit | default: 6 %}
{% assign glider_id = section_id | append: '--glider' %}
{% assign heading = section.settings.heading | default: '' %}
{% assign heading_highlight = section.settings.heading_highlight | default: false %}
{% assign is_glider = false %}

{% if recommendations.products_count > 3 %}
  {% assign is_glider = true %}
{% endif %}

<div class="{{ section_name }}" id="{{ section_id }}" data-colour-theme-dark data-section-padding>

  <div class="{{ section_name }}__intro intro" data-text-alignment-left>
    {% render 'bs-container', state: 'open' %}
      {%
        render 'heading-highlight',
        classes: 'product-recommendations__heading intro__heading heading--2',
        heading: heading,
        style: heading_highlight,
        tag: 'h2'
      %}
    {% render 'bs-container', state: 'closed' %}
  </div>

  <div class="{{ section_name }}__main main" id="{{ section_name }}__main" data-product-limit="{{ product_limit }}">
    <!-- Inject Ajax Recommended Products Here -->
  </div>

  <div class="{{ section_name }}__glider-controls glide__controls--technical">
    <button class="glide__button button prev" data-target="#{{ glider_id }}">
      <span class="button__icon">{% render 'svg', type: 'icon.arrow' %}</span>
    </button>
    <button class="glide__button button next" data-target="#{{ glider_id }}">
      <span class="button__icon">{% render 'svg', type: 'icon.arrow' %}</span>
    </button>
  </div>

</div>

<script>

  let sectionName = {{ section_name | json }};
  let html, is_glider;
  let productID = {{ product.id | json }};
  let limit = {{ product_limit | json }};
  let recommendedGlider = {
    interval: null,
    id: {{ glider_id | json }},
    glider: {}
  };

  document.addEventListener('DOMContentLoaded', function() {
    recommendedProducts();
  }, false);

  function recommendedProducts() {
    fetch(window.Shopify.routes.root + `recommendations/products.json?product_id=${productID}&limit=${limit}`)
      .then(response => response.json())
      .then(({ products }) => {
        console.log( 'recommendedProducts ::', products );
        if (products.length > 0) {
          document.getElementById(`${sectionName}__main`).innerHTML = renderGliderMarkup(products);
          initializeGlider();
        }
      }
    );
  };

  function renderGliderMarkup( products = [] ) {
    return `
      <div class="glide" id="${recommendedGlider.id}" data-glide-style="recommended-products">
        <div class="glide__track" data-glide-el="track">
          <ul class="glide__slides">
            ${products.map(product =>
              `<li class="glide__slide">
                <div class="${sectionName}__item">
                  ${renderProductCardMarkup(product)}
                </div>
              </li>`
            ).join('')}
          </ul>
        </div>
      </div>
    `;
  };

  function renderProductCardMarkup( product = {} ) {

    let featuredImage = {
      small: Theme.imgURLFilter(product.featured_image, 'icon'),
      large: Theme.imgURLFilter(product.featured_image, 'large')
    };
    let handle = product.handle;
    let title = product.title;

    return `
      <article class="card-product card-product--${sectionName} product">
        <div class="card-product__featured-image product__featured-image">
          <a class="card-product__featured-image-link link" href="/products/${handle}" title="${title}" target="_self">
            <img class="lazyload-item lazyload-item--image lazypreload lazyload-item--inline inline lazyautosizes lazyload" src="${featuredImage.small}" data-src="${featuredImage.large}" alt="${title}" />
          </a>
        </div>
        <div class="card-product__info">
          <strong class="card-product__title caption--2">
            <a class="card-product__title-link link" href="/products/${handle}" title="${title}" target="_self">${title}</a>
          </strong>
          <div class="card-product__price caption--2">${renderProductPrice(product)}</div>
        </div>
      </article>
    `;

  };

  function renderProductPrice( product = {} ) {

    let price = product.price || 0;
    let price_compare = product.compare_at_price || 0;

    return `
      <div class="price${ price_compare ? ' with-sale-price' : '' }">
        <span class="price__value"><span class="price__currency-symbol">$</span>${(price/100).toFixed(2)}</span>
        <span class="price__value sale-price"><span class="price__currency-symbol">$</span>${(price_compare/100).toFixed(2)}</span>
      </div>
    `;

  };

  function initializeGlider() {

    recommendedGlider.glider = new Glide( `#${recommendedGlider.id}`, {
      animationTimingFunc: 'ease-in-out',
      animationDuration: 280,
      autoplay: 3200,
      breakpoints: {
        9999: {
          // up to 1200
          focusAt: 'center',
          gap: 32,
          peek: { before: 64, after: 64 },
          perView: 4,
        },
        1399: {
          // up to 992
          focusAt: 'center',
          gap: 32,
          peek: { before: 64, after: 64 },
          perView: 3,
        },
        991: {
          // up to 992
          focusAt: 'center',
          gap: 32,
          peek: { before: 64, after: 64 },
          perView: 2,
        },
        767: {
          // up to 576
          focusAt: 'center',
          gap: 32,
          peek: { before: 64, after: 64 },
          perView: 1,
        },
      },
      gap: 32,
      peek: 0,
      hoverpause: true,
      type: 'carousel',
      rewind: true,
      throttle: 50
    });

    recommendedGlider.glider.on( 'mount.after', function(event) {
      setTimeout( function() {
        recommendedGlider.glider.update();
      }, 250 );
    });

    ( document.querySelectorAll(`[data-target="#${recommendedGlider.id}"].next`) || [] ).forEach( button => {
      button.addEventListener('click', function () {
        recommendedGlider.glider.go('>');
      });
    });

    ( document.querySelectorAll(`[data-target="#${recommendedGlider.id}"].prev`) || [] ).forEach( button => {
      button.addEventListener('click', function () {
        recommendedGlider.glider.go('<');
      });
    });

    recommendedGlider.glider.mount();

  };

  function initializeGliderWithInterval() {

    console.log('initializeGliderWithInterval :: Initialized');

    recommendedGlider.interval = setInterval( function() {

      if ( document.getElementById(recommendedGlider.id) ) {

        clearInterval(recommendedGlider.interval);

        recommendedGlider.glider = new Glide( `#${recommendedGlider.id}`, {
          animationTimingFunc: 'ease-in-out',
          animationDuration: 280,
          autoplay: 3200,
          breakpoints: {
            1199: {
              // up to 1200
              focusAt: 'center',
              gap: 42,
              peek: 0,
              perView: 6,
            },
            991: {
              // up to 992
              focusAt: 'center',
              gap: 32,
              peek: 0,
              perView: 5,
            },
            767: {
              // up to 768
              focusAt: 'center',
              gap: 32,
              peek: { before: 55, after: 55 },
              perView: 4,
            },
            575: {
              // up to 576
              focusAt: 'center',
              gap: 32,
              peek: { before: 35, after: 35 },
              perView: 3,
            },
            400: {
              // up to 576
              focusAt: 'center',
              gap: 32,
              peek: { before: 15, after: 15 },
              perView: 1,
            },
          },
          gap: 32,
          peek: 0,
          hoverpause: true,
          type: 'carousel',
          rewind: true,
          throttle: 50
        });

        recommendedGlider.glider.on( 'mount.after', function(event) {
          setTimeout( function() {
            recommendedGlider.glider.update();
          }, 250 );
        });

        ( document.querySelectorAll(`[data-target="#${recommendedGlider.id}"].next`) || [] ).forEach( button => {
          button.addEventListener('click', function () {
            recommendedGlider.glider.go('>');
          });
        });

        ( document.querySelectorAll(`[data-target="#${recommendedGlider.id}"].prev`) || [] ).forEach( button => {
          button.addEventListener('click', function () {
            recommendedGlider.glider.go('<');
          });
        });

        recommendedGlider.glider.mount();

      }

    }, 100);

    console.log('initializeGliderWithInterval :: Finished');

  };

</script>

{% schema %}
  {
    "name": "Product Recommendations",
    "class": "section section--product-recommendations",
    "settings": [
      {
        "content": "Content",
        "type": "header"
      },
      {
        "label": "Heading",
        "type": "richtext",
        "id": "heading"
      },
      {
        "label": "Heading Highlight",
        "type": "select",
        "options": [
          { "value": "standard", "label": "Standard" },
          { "value": "stroke", "label": "Stroke" },
          { "value": "circle", "label": "Circle" }
        ],
        "default": "standard",
        "id": "heading_highlight"
      },
      {
        "content": "Settings",
        "type": "header"
      },
      {
        "label": "Max number of recommended products",
        "type": "range",
        "min": 3,
        "max": 9,
        "step": 1,
        "default": 4,
        "id": "product_limit"
      }
    ],
    "presets": [
      {
        "name": "Product Recommendations"
      }
    ],
    "templates": [ "product" ]
  }
{% endschema %}
